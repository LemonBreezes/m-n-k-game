#+title: A Python Tic Tac Toe game

* Outline
:PROPERTIES:
:CREATED_TIME: [2021-11-07 Sun 14:52]
:END:

#+BEGIN_SRC python :noweb yes :tangle main.py :exports none
"""This is a Python Tic Tac Toe game"""

# imports
import sys
<<tictactoe-main-imports>>

# constants
<<tictactoe-constants>>

# exception classes

# interface functions

# classes
<<TicTacToeBoard-defn>>

<<TicTacToeAI-defn>>

<<TicTacToeGame-defn>>

# internal functions & classes
<<tictactoe-main>>

if __name__ == '__main__':
    status = main()
    sys.exit(status)
#+END_SRC

* Main
:PROPERTIES:
:CREATED_TIME: [2021-11-07 Sun 15:54]
:END:

#+name: tictactoe-main
#+begin_src python
def main():
    game = TicTacToeGame(board_size, num_players, winning_row_length)
    game.start()
    return 0
#+end_src

** [ ] Add an argument parser for changing ~board_size~, etc.
:PROPERTIES:
:CREATED_TIME: [2021-11-08 Mon 22:58]
:END:

** [ ] Add an AI player
:PROPERTIES:
:CREATED_TIME: [2021-11-08 Mon 23:38]
:END:

* Constants
:PROPERTIES:
:CREATED_TIME: [2021-11-08 Mon 19:30]
:END:

#+name: tictactoe-constants
#+begin_src python
board_size = 3
num_players = 2
winning_row_length = 3
AI_difficulty = 1
#+end_src

* Define the ~TicTacToeGame~ class
:PROPERTIES:
:CREATED_TIME: [2021-11-07 Sun 16:20]
:END:

#+name: TicTacToeGame-defn
#+begin_src python
class TicTacToeGame(object):
    def __init__(self, size, num_players, winning_row_length):
        self._board = TicTacToeBoard(size=size,
                                     num_players=num_players,
                                     winning_row_length=winning_row_length)

    def start(self):
        board = self._board
        AI = TicTacToeAI(board=board, player_id=2, difficulty=AI_difficulty)
        board.display()
        while True:
            move = [ int(x) for x in input('Make your move: ').split()]
            if (board.isPointMarked(move[0]-1,move[1]-1)):
                print('Your choice of move is invalid.')
                continue
            board.addMark(x=move[0],y=move[1],player=1)
            board.display()
            if (board.getWinner() == 1):
                print('You win!')
                break
            sleep(1)
            AI.makeNextMove()
            board.display()
            if (board.getWinner() > 1):
                print('You lost!')
                break
#+end_src

* Define the ~TicTacToeBoard~ class
:PROPERTIES:
:CREATED_TIME: [2021-11-07 Sun 22:32]
:END:

#+name: TicTacToeBoard-defn
#+begin_src python
class TicTacToeBoard(object):
    def __init__(self, size, num_players, winning_row_length):
        self._size = size
        self._num_players = num_players
        self._winning_row_length = winning_row_length
        self._board = [[0 for i in range(size)] for j in range(size)]

    def __init__(self, board):
        self._size = board.getSize()
        self._num_players = board.getNumPlayers()
        self._winning_row_length = board.getWinningRowLength()
        self._board = board.getBoard()

    def display(self):
        board = '|\n|'.join(['|'.join(map(str, row)) for row in self._board])
        board = '_' * (self._size * 2) + '_\n|' + board
        board = board + '|\n‾' + '‾' * (self._size * 2)
        print(board)
        
    def getBoard(self):
        return self._board
    
    def getSize(self):
        return self._size

    def getWinningRowLength(self):
        return self._winning_row_length
    
    def getNumPlayers(self):
        return self._num_players

    def addMark(self, x, y, player):
        x = x - 1
        y = y - 1
        board = self._board
        board[x][y] = player
        
    def isPointMarked(self,x,y):
        return not (self._isPointInBoard(x,y) and self._board[x][y] == 0)

    def getWinner(self):
        lines_table = self.getLinesTable()
        for player in range(1,self._num_players + 1):
            for lines in lines_table[player]:
                if len(lines) >= self._winning_row_length:
                    p = next(iter(lines))
                    player = self._board[p[0]][p[1]]
                    return player
        return 0
    
    def getLinesTable(self):
        lines_table = [set() for player in range(self._num_players + 1)]
        for player in range(self._num_players + 1):
            for x, y in product(range(self._size), range(self._size)):
                p = (x,y)
                q = self._getSecondPoint(x,y,player)
                # print('The second point is: ' + str(q))
                if q: lines_table[player].add(self._getAlignedPoints(p, q, player))
        return lines_table
        

    def _getSecondPoint(self, x, y, player):
        if self._board[x][y] != player:
            return False
        for i, j in product(range(-1,2),range(-1,2)):
            if (i == 0 and j == 0):
                continue
            if (self._isPointInBoard(x+i,y+j) and self._board[x+i][y+j] == player):
                return (x+i,y+j)

    def _getAlignedPoints(self, p, q, player):
        aligned_points = {p, q}
        curr = q 
        while (self._isPointInBoard(curr[0] + q[0] - p[0],
                                    curr[1] + q[1] - p[1])
               and self._board[curr[0] + q[0] - p[0]][curr[1] + q[1] - p[1]] == player):
            aligned_points.add((curr[0] + q[0] - p[0], curr[1] + q[1] - p[1]))
            curr = (curr[0] + q[0] - p[0], curr[1] + q[1] - p[1])
        curr = p
        while (self._isPointInBoard(curr[0] - q[0] + p[0],
                                    curr[1] - q[1] + p[1])
               and self._board[curr[0] - q[0] + p[0]][curr[1] - q[1] + p[1]] == player):
            aligned_points.add((curr[0] - q[0] + p[0], curr[1] - q[1] + p[1]))
            curr = (curr[0] - q[0] + p[0], curr[1] - q[1] + p[1])
        # print('The aligned points are: ' + str(aligned_points))
        return frozenset(aligned_points)
            

    def _isPointInBoard(self, x, y):
        return (0 <= x < self._size and 0 <= y < self._size)

    def clear(self):
        self._board = [[0 for i in range(self.size)] for j in range(self.size)]
#+end_src

* Define the ~TicTacToeAI~ class
:PROPERTIES:
:CREATED_TIME: [2021-11-08 Mon 23:46]
:END:

#+name: TicTacToeAI-defn
#+begin_src python
class TicTacToeAI(object):
    def __init__(self, board, player_id, difficulty):
        self._board = board
        self._difficulty = difficulty
        self._id = player_id
        pass

    def _canOpponentWin(self, table):
        return False

    def makeNextMove(self):
        table = self._board.getLinesTable()
        if (self._difficulty >= 2
            and self._canOpponentWin()):
            self.makeDefensiveMove()
        elif (self._difficulty >= 1):
            self.makeRandomMove()

    def makeRandomMove(self):
        while (True):
            x = randrange(self._board.getSize())
            y = randrange(self._board.getSize())
            if (self._board.getBoard()[x][y] == 0):
                self._board.addMark(x+1,y+1,self._id)
                break
#+end_src

* Create ~unittest~ tests
:PROPERTIES:
:CREATED_TIME: [2021-11-08 Mon 13:48]
:END:

** ~TicTacToeBoard~ tests
:PROPERTIES:
:CREATED_TIME: [2021-11-08 Mon 15:18]
:END:

#+name: unittest-TicTacToeBoard
#+begin_src python
class TestTicTacToeBoard(unittest.TestCase):
    def test_addMark(self):
        board = TicTacToeBoard(size=3, num_players=1, winning_row_length=3)
        board.addMark(x=1,y=1,player=1)
        self.assertEqual(board.getBoard(), [[1, 0, 0], [0, 0, 0], [0, 0, 0]])
        board.addMark(x=1,y=2,player=1)
        self.assertEqual(board.getBoard(), [[1, 1, 0], [0, 0, 0], [0, 0, 0]])
        board.addMark(x=1,y=3,player=1)
        self.assertEqual(board.getBoard(), [[1, 1, 1], [0, 0, 0], [0, 0, 0]])
        
    def test_getWinner(self):
        board = TicTacToeBoard(size=3, num_players=1, winning_row_length=3)
        board._board = [[1, 1, 1],
                        [0, 0, 0],
                        [0, 0, 0]]
        self.assertEqual(board.getWinner(), 1)
        board._board = [[1, 0, 1],
                        [0, 1, 0],
                        [0, 0, 0]]
        self.assertEqual(board.getWinner(), 0)
        board._board = [[1, 1, 0],
                        [1, 0, 1],
                        [0, 1, 1]]
        self.assertEqual(board.getWinner(), 0)
        board._board = [[1, 1, 0],
                        [1, 1, 1],
                        [0, 1, 1]]
        self.assertEqual(board.getWinner(), 1)
#+end_src

* Write ~run_tests.py~
:PROPERTIES:
:CREATED_TIME: [2021-11-08 Mon 15:16]
:END:

#+begin_src python :noweb yes :tangle run_tests.py :exports none
import sys
import unittest
from main import *
from numpy import array_equal

<<unittest-TicTacToeBoard>>

def main():
    suite = unittest.TestSuite()
    suite.addTests(
        unittest.defaultTestLoader.loadTestsFromModule(sys.modules[__name__]))
    unittest.TextTestRunner(verbosity=2).run(suite)
    return 0

if __name__ == '__main__':
    status = main()
    sys.exit(status)
#+end_src

* Imports
:PROPERTIES:
:CREATED_TIME: [2021-11-07 Sun 15:59]
:END:

#+name: tictactoe-main-imports
#+begin_src python
from itertools import product
from numpy import matrix
from math import floor
from time import sleep
from random import randrange
#+end_src
